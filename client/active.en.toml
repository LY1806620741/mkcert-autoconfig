errUnknownGroupCommand = "err. Unknown command \"{{.Name}}\""
failedDeCodePublicKey = "failed to decode public key"
failedEnCodePublicKey = "failed to encode public key"
failedGenCaKey = "failed to generate the CA key"
help = "Usage of {{.Name}}:\n\t\t\n    $ {{.Name}} auto\n    use guide\n\n    $ {{.Name}} mkcert\n    use mkcert, the same as mkcert's usage.\n\n"
moreOptions = "For more options, run \"mkcert -help\"."
scan10 = "failed to encode certificate key"
scan11 = "failed to save certificate and key"
scan12 = "failed to save certificate"
scan13 = "failed to save certificate key"
scan14 = "failed to generate PKCS#12"
scan15 = "failed to save PKCS#12"
scan16 = "\nThe certificate and key are at \"%s\" ‚úÖ\n\n"
scan17 = "\nThe certificate is at \"%s\" and the key at \"%s\" ‚úÖ\n\n"
scan18 = "\nThe PKCS#12 bundle is at \"%s\" ‚úÖ\n"
scan19 = "\nThe legacy PKCS#12 encryption password is the often hardcoded default \"changeit\" ‚ÑπÔ∏è\n\n"
scan20 = "It will expire on %s üóì\n\n"
scan21 = "\nCreated a new certificate valid for the following names üìú"
scan22 = " - %q"
scan23 = "   Warning: many browsers don't support second-level wildcards like %q ‚ö†Ô∏è"
scan24 = "\nReminder: X.509 wildcards only go one level deep, so this won't match a.b.%s ‚ÑπÔ∏è"
scan25 = "failed to generate serial number"
scan26 = "failed to read the CSR"
scan27 = "ERROR: failed to read the CSR: unexpected content"
scan28 = "failed to parse the CSR"
scan29 = "invalid CSR signature"
scan30 = "failed to parse generated certificate"
scan31 = "\nThe certificate is at \"%s\" ‚úÖ\n\n"
scan32 = "failed to read the CA certificate"
scan33 = "ERROR: failed to read the CA certificate: unexpected content"
scan34 = "failed to parse the CA certificate"
scan35 = "failed to read the CA key"
scan36 = "ERROR: failed to read the CA key: unexpected content"
scan37 = "failed to parse the CA key"
scan38 = "failed to generate the CA key"
scan39 = "failed to encode public key"
scan40 = "failed to decode public key"
scan41 = "failed to generate CA certificate"
scan42 = "failed to encode CA key"
scan43 = "failed to save CA key"
scan44 = "failed to save CA certificate"
scan45 = "Created a new local CA üí•\n"
scan46 = "Exported to the current directory"
scan47 = "The credit client has been generated and is currently in the dist directory. Please deploy it on your server."
scan48 = "The local CA is already installed in the system trust store! üëç"
scan49 = "Root certificate client generated automkcert-root üí•\n"
scan50 = "ERROR: you can't set -[un]install and -CAROOT at the same time"
scan51 = "ERROR: you can't set -install and -uninstall at the same time"
scan52 = "ERROR: can only combine -csr with -install and -cert-file"
scan53 = "ERROR: can't specify extra arguments when using -csr"
scan54 = "ERROR: failed to find the default CA location, set one as the CAROOT env var"
scan55 = "failed to create the CAROOT"
scan56 = "Note: the local CA is not installed in the system trust store."
scan57 = "Note: the local CA is not installed in the %s trust store."
scan58 = "Note: the local CA is not installed in the Java trust store."
scan59 = "Run \"mkcert -install\" for certificates to be trusted automatically ‚ö†Ô∏è"
scan60 = "ERROR: %q is not a valid hostname, IP, URL or email: %s"
scan61 = "ERROR: %q is not a valid hostname, IP, URL or email"
scan62 = "The local CA is now installed in the system trust store! ‚ö°Ô∏è"
scan63 = "The local CA is already installed in the %s trust store! üëç"
scan64 = "The local CA is now installed in the %s trust store (requires browser restart)! ü¶ä"
scan65 = "Note: %s support is not available on your platform. ‚ÑπÔ∏è"
scan66 = "Warning: \"certutil\" is not available, so the CA can't be automatically installed in %s! ‚ö†Ô∏è"
scan67 = "Install \"certutil\" with \"%s\" and re-run \"mkcert -install\" üëà"
scan68 = "The local CA is already installed in Java's trust store! üëç"
scan69 = "The local CA is now installed in Java's trust store! ‚òïÔ∏è"
scan7 = "ERROR: can't create new certificates because the CA key (rootCA-key.pem) is missing"
scan70 = "Warning: \"keytool\" is not available, so the CA can't be automatically installed in Java's trust store! ‚ö†Ô∏è"
scan72 = "Warning: \"certutil\" is not available, so the CA can't be automatically uninstalled from %s (if it was ever installed)! ‚ö†Ô∏è"
scan73 = "You can install \"certutil\" with \"%s\" and re-run \"mkcert -uninstall\" üëà"
scan74 = "Warning: \"keytool\" is not available, so the CA can't be automatically uninstalled from Java's trust store (if it was ever installed)! ‚ö†Ô∏è"
scan75 = "The local CA is now uninstalled from the system trust store(s)! üëã"
scan76 = "The local CA is now uninstalled from the %s trust store(s)! üëã"
scan77 = "ERROR: %s: %s"
scan78 = "ERROR: failed to execute \"%s\": %s\n\n%s\n"
scan79 = "Warning: \"sudo\" is not available, and mkcert is not running as root. The (un)install operation might fail. ‚ö†Ô∏è"
scan8 = "failed to generate certificate key"
scan80 = "failed to create temp file"
scan81 = "failed to read trust settings"
scan82 = "failed to parse trust settings"
scan83 = "ERROR: unsupported trust settings version:"
scan84 = "failed to serialize trust settings"
scan85 = "failed to write trust settings"
scan86 = "Installing to the system store is not yet supported on this Linux üò£ but %s will still work."
scan87 = "You can also manually install the root certificate at %q."
scan88 = "failed to read root certificate"
scan89 = "ERROR: no %s security databases found"
scan9 = "failed to generate certificate"
scan90 = "Installing in %s failed. Please report the issue with details about your environment at https://github.com/FiloSottile/mkcert/issues/new üëé"
scan91 = "Note that if you never started %s, you need to do that at least once."
scan92 = "decode pem"
scan93 = "open root store"
scan94 = "add cert"
scan95 = "delete cert"
shortUsage = "Usage of mkcert:\n\n\t$ mkcert -install\n\tInstall the local CA in the system trust store.\n\n\t$ mkcert example.org\n\tGenerate \"example.org.pem\" and \"example.org-key.pem\".\n\n\t$ mkcert example.com myapp.dev localhost 127.0.0.1 ::1\n\tGenerate \"example.com+4.pem\" and \"example.com+4-key.pem\".\n\n\t$ mkcert \"*.example.it\"\n\tGenerate \"_wildcard.example.it.pem\" and \"_wildcard.example.it-key.pem\".\n\n\t$ mkcert -uninstall\n\tUninstall the local CA (but do not delete it).\n\n"

[advancedUsage]
description = "this is advancedUsage"
other = "Advanced options:\n\n\t-cert-file FILE, -key-file FILE, -p12-file FILE\n\t\tCustomize the output paths.\n\n\t-client\n\t\tGenerate a certificate for client authentication.\n\n\t-ecdsa\n\t\tGenerate a certificate with an ECDSA key.\n\n\t-pkcs12\n\t\tGenerate a \".p12\" PKCS #12 file, also know as a \".pfx\" file,\n\t\tcontaining certificate and key for legacy applications.\n\n\t-csr CSR\n\t\tGenerate a certificate based on the supplied CSR. Conflicts with\n\t\tall other flags and arguments except -install and -cert-file.\n\n\t-CAROOT\n\t\tPrint the CA certificate and key storage location.\n\n\t$CAROOT (environment variable)\n\t\tSet the CA certificate and key storage location. (This allows\n\t\tmaintaining multiple local CAs in parallel.)\n\n\t$TRUST_STORES (environment variable)\n\t\tA comma-separated list of trust stores to install the local\n\t\troot CA into. Options are: \"system\", \"java\" and \"nss\" (includes\n\t\tFirefox). Autodetected by default.\n\n"
