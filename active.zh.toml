errUnknownGroupCommand = "错误. 未知的命令 \"{{.Name}}\""
failedDeCodePublicKey = "无法解码公钥"
failedEnCodePublicKey = "未能对公钥进行编码"
failedGenCaKey = "无法生成CA密钥"
help = "{{.Name}}的用法:\n\t\t\n    $ {{.Name}} auto\n    使用向导\n\n    $ {{.Name}} mkcert\n    使用 mkcert, 跟原版 mkcert 用法一致.\n\n"
moreOptions = "有关更多选项，请运行“mkcert-help”。"
scan10 = "无法对证书密钥进行编码"
scan11 = "无法保存证书和密钥"
scan12 = "无法保存证书"
scan13 = "未能保存证书密钥"
scan14 = "未能生成PKCS#12"
scan15 = "未能保存PKCS#12"
scan16 = "\n证书和密钥位于 \"%s\" ✅\n\n"
scan17 = "\n证书位于 \"%s\" and the key at \"%s\" ✅\n\n"
scan18 = "\nPKCS#12捆绑包位于 \"%s\" ✅\n"
scan19 = "\n传统的PKCS#12加密密码通常是硬编码的默认密码\"改变它\" ℹ️\n\n"
scan20 = "它将于 %s 到期🗓\n\n"
scan21 = "\n创建了对以下名称有效的新证书 📜"
scan22 = " - %q"
scan23 = "   警告：许多浏览器不支持二级通配符，如 %q ⚠️"
scan24 = "\n提醒：X.509通配符只深入一级，因此与a.b不匹配。%s ℹ️"
scan25 = "无法生成序列号"
scan26 = "未能读取CSR"
scan27 = "错误：无法读取CSR:意外内容"
scan28 = "无法分析CSR"
scan29 = "CSR签名无效"
scan30 = "无法分析生成的证书"
scan31 = "\n证书位于 \"%s\" ✅\n\n"
scan32 = "无法读取CA证书"
scan33 = "错误：无法读取CA证书：意外内容"
scan34 = "无法分析CA证书"
scan35 = "无法读取CA密钥"
scan36 = "错误：无法读取CA密钥：意外内容"
scan37 = "无法分析CA密钥"
scan38 = "无法生成CA密钥"
scan39 = "未能对公钥进行编码"
scan40 = "未能对公钥进行解码"
scan41 = "无法生成CA证书"
scan42 = "无法对CA密钥进行编码"
scan43 = "保存CA密钥失败"
scan44 = "保存CA证书失败"
scan45 = "创建了一个新的本地CA 💥\n"
scan46 = "已导出到当前目录下"
scan47 = "已生成授信客户端，在当前dist目录下，请在你的服务器进行部署"
scan48 = "本地CA已安装在系统信任存储中！ 👍"
scan49 = "生成了根证书客户端automkcert-root 💥\n"
scan50 = "错误：不能同时设置-[un]install和-CAROOT"
scan51 = "错误：不能同时设置-install和-uninstall"
scan52 = "错误：只能将-csr与-install和-cert文件结合使用"
scan53 = "错误：使用-csr时无法指定额外的参数"
scan54 = "错误：找不到默认的CA位置，将其设置为CAROOT env var"
scan55 = "未能创建CAROOT"
scan56 = "注意：本地CA未安装在系统信任存储中。"
scan57 = "注意：本地CA未安装在%s信任存储中。"
scan58 = "注意：本地CA未安装在Java信任存储中。"
scan59 = "运行“mkcert-install”以自动信任证书 ⚠️"
scan60 = "错误：%q不是有效的主机名、IP、URL或电子邮件：%s"
scan61 = "错误：%q不是有效的主机名、IP、URL或电子邮件"
scan62 = "本地CA现在已安装在系统信任存储中！ ⚡️"
scan63 = "本地CA已安装在%s信任存储中！ 👍"
scan64 = "本地CA现在已安装在%s信任存储中（需要重新启动浏览器）！ 🦊"
scan65 = "注意：%s支持在您的平台上不可用。 ℹ️"
scan66 = "警告：“certutil”不可用，因此CA无法自动安装在%s中！ ⚠️"
scan67 = "使用“%s”安装“certutil”，然后重新运行“mkcert-Install”👈"
scan68 = "本地CA已安装在Java的信任存储中！ 👍"
scan69 = "本地CA现在已安装在Java的信任存储中！☕️"
scan7 = "错误：无法创建新证书，因为CA密钥（rootCA密钥.pem）丢失"
scan70 = "警告：“keytool”不可用，因此CA无法自动安装在Java的信任存储中！⚠️"
scan72 = "警告：“certutil”不可用，因此CA无法从%s自动卸载（如果已安装）！⚠️"
scan73 = "您可以将“certutil”与“%s”一起安装，然后重新运行“mkcert-uninstall” 👈"
scan74 = "警告：“keytool”不可用，因此CA无法从Java的信任存储中自动卸载（如果已安装）! ⚠️"
scan75 = "本地CA现在已从系统信任存储中卸载! 👋"
scan76 = "本地CA现在已从%s信任存储中卸载！ 👋"
scan77 = "错误: %s: %s"
scan78 = "错误：无法执行 \"%s\": %s\n\n%s\n"
scan79 = "警告：“sudo”不可用，并且mkcert没有以root身份运行。（取消）安装操作可能会失败。 ⚠️"
scan8 = "无法生成证书密钥"
scan80 = "无法创建临时文件"
scan81 = "无法读取信任设置"
scan82 = "无法分析信任设置"
scan83 = "错误：不支持的信任设置版本："
scan84 = "无法序列化信任设置"
scan85 = "无法写入信任设置"
scan86 = "此Linux尚不支持安装到系统存储😣 但%s仍然有效。"
scan87 = "您也可以在%q手动安装根证书."
scan88 = "无法读取根证书"
scan89 = "错误：找不到%s安全数据库"
scan9 = "无法生成证书"
scan90 = "在%s中安装失败。请在上报告此问题并提供有关您的环境的详细信息 https://github.com/FiloSottile/mkcert/issues/new 👎"
scan91 = "请注意，如果您从未启动%s，则需要至少启动一次。"
scan92 = "解码pem"
scan93 = "打开根存储"
scan94 = "增加证书"
scan95 = "删除证书"
shortUsage = "mkcert 的用法：\n\n\t$ mkcert -install\n\t在系统信任存储中安装本地 CA。\n\n\t$ mkcert example.org\n\t生成 \"example.org.pem\" 和 \"example.org-key.pem\"。\n\n\t$ mkcert example.com myapp.dev localhost 127.0.0.1 ::1\n\t生成 \"example.com+4.pem\" 和 \"example.com+4-key.pem\"。\n\n\t$ mkcert \"*.example.it\"\n\t生成 \"_wildcard.example.it.pem\" 和 \" _wildcard.example.it-key.pem\"。\n\n\t$ mkcert -uninstall\n\t卸载本地 CA（但不删除它）。\n\n"

[advancedUsage]
description = "这是高级用法"
other = "高级选项:\n\n\t-cert-file FILE、-key-file FILE、-p12-file FILE\n\t\t自定义输出路径。\n\n\t-client\n\t\t生成 用于客户端身份验证的证书。\n\n\t-ecdsa\n\t\t使用 ECDSA 密钥生成证书。\n\n\t-pkcs12\n\t\t生成 \".p12\" PKCS # 12 文件，也称为“.pfx”文件，\n\t\t包含旧应用程序的证书和密钥。\n\n\t-csr CSR\n\t\t根据提供的 CSR 生成证书 。 与除 -install 和 -cert-file 之外的\n\t\t所有其他标志和参数冲突。\n\n\t-CAROOT\n\t\t打印 CA 证书和密钥存储位置。\n\n\t$ CAROOT（环境变量）\n\t\t设置 CA 证书和密钥存储位置。 （这允许\n\t\t并行维护多个本地 CA。）\n\n\t$TRUST_STORES（环境变量）\n\t\t用于安装本地 CA 的以逗号分隔的信任存储列表\n\t\troot CA 进入。 选项有：\"system\"、\"java\" 和 \"nss\"（包括\n\t\tFirefox）。 默认情况下自动检测。\n\n"